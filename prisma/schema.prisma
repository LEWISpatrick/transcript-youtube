generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}
enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 UserRole  @default(USER)
  freeScriptsGenerated Int       @default(0)  // Add this line
  accounts             Account[]
  createdAt            DateTime  @default(now())
  purchases            Purchase[]
  videoNiches          VideoNiche[]
  videoOutlines        VideoOutline[]
  fullScripts          FullScript[]
}

model Account {
  
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}


model Purchase {
  id         String   @id @default(uuid())
  userId     String
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
}

model VideoNiche {
  id        String   @id @default(uuid())
  userId    String
  niche     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VideoOutline {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FullScript {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
